stages:
  - publish
  - scan

variables:
  MAJOR_VERSION: '9'
  MINOR_VERSION: '9.0'
  FULL_VERSION: '9.0.0'

# PR builds

build-v9.0.0-pr:
  extends: .build-version-pr
  variables:
    FULL_VERSION: '9.0.0'
  image: docker:latest
  before_script: ['docker info']
  services: ['docker:dind']
  stage: publish
  tags: [docker]
  except: [master, tags]

build-v8.22.0-pr:
  extends: .build-version-pr
  variables:
    FULL_VERSION: '8.22.0'
  image: docker:latest
  before_script: ['docker info']
  services: ['docker:dind']
  stage: publish
  tags: [docker]
  except: [master, tags]

# ---
# Main builds

build-v9.0.0:
  extends: .build-version
  variables:
    MAJOR_VERSION: '9'
    MINOR_VERSION: '9.0'
    FULL_VERSION: '9.0.0'

    PUBLISH_MAJOR_TAG: 'true'
    PUBLISH_LATEST_TAG: 'true'
  image: docker:latest
  before_script: ['docker info']
  services: ['docker:dind']
  stage: publish
  only: [master, tags]
  tags: [docker]

build-v8.22.0:
  extends: .build-version
  variables:
    MAJOR_VERSION: '8'
    MINOR_VERSION: '8.22'
    FULL_VERSION: '8.22.0'

    PUBLISH_MAJOR_TAG: 'true'
  image: docker:latest
  before_script: ['docker info']
  services: ['docker:dind']
  stage: publish
  only: [master, tags]
  tags: [docker]

container_scanning:
  image: docker:stable
  stage: scan
  variables:
    DOCKER_DRIVER: overlay2
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    paths: [gl-container-scanning-report.json]

.build-version-pr:
  script:
    - docker build --build-arg SENTRY_VERSION=$FULL_VERSION -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --label org.opencontainers.image.revision=$CI_COMMIT_SHA .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.build-version:
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --build-arg SENTRY_VERSION=$FULL_VERSION -t $CI_REGISTRY_IMAGE:$FULL_VERSION --label org.opencontainers.image.revision=$CI_COMMIT_SHA .

    - docker tag $CI_REGISTRY_IMAGE:$FULL_VERSION $CI_REGISTRY_IMAGE:$MINOR_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$FULL_VERSION $CI_REGISTRY_IMAGE:$MAJOR_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$FULL_VERSION $CI_REGISTRY_IMAGE:latest

    - docker push $CI_REGISTRY_IMAGE:$FULL_VERSION
    - docker push $CI_REGISTRY_IMAGE:$MINOR_VERSION
    - if [ $PUBLISH_MAJOR_TAG ]; then docker push $CI_REGISTRY_IMAGE:$MAJOR_VERSION; fi
    - if [ $PUBLISH_LATEST_TAG ]; then docker push $CI_REGISTRY_IMAGE:latest; fi
